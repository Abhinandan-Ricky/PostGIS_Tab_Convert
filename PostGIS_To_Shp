'''
This script turns all of the tables in a list of postgis databases into shp files based on a query.
It must be run in the QGIS environment. Tested in QGIS 2.8.1.
'''
import os

# create databases list and table list
databases = ["SV"]
#databases = ["SV", "GT", "NI", "PA", "CR", "KR", "CL", "MX", "AR"]
#databases = ["AQ", "AR", "BR", "CA", "CL", "CR", "CU", "DE", "ES", "GB", "GT", "JP", "KR", "MX", "NG", "NI", "PA", "RU", "SV"]
print "Databases:", databases
tableList = ["planet_osm_line", "planet_osm_point", "planet_osm_polygon", "planet_osm_roads"]
print "Table list:", tableList

# create other variables
server = "nico6"
encoding = "utf-8"
coordsys = QgsCoordinateReferenceSystem(3857, QgsCoordinateReferenceSystem.EpsgCrsId)
outputBase = "W:/SGSI/SpectrumBaseMaps/OSM/OutputTest/"

# connect to nico6
uri = QgsDataSourceURI()
for database in databases:
    uri.setConnection(server, "5432", database, "geouser", "geouser")
    print "Connection to", server, database, "established."

    # go through every table in the list and turn it into a vector layer
    for table in tableList:
        print "Conection to", database, ": ", table, " established."
        uri.setDataSource("public", table, "way")
        vlayer = QgsVectorLayer(uri.uri(), table, "postgres")

        # get row and column counts and print them out
        if table == "planet_osm_line":
            fields = vlayer.pendingFields()
            numFields = len(fields)
            numRows = vlayer.featureCount()

            #lineQuery = NEED QUERY
            print "Original", database, ": ", table, "has", str(numRows), "rows and", str(numFields), "columns."

            #request = QgsFeatureRequest()
            #request.setFilterExpression(lineQuery)
            
            #selectedRows = []
            #selectedFeatures = vlayer.getFeatures(request)
            #for feature in selectedFeatures:
            #    selectedRows.append(feature.id())
            #vlayer.setSelectedFeatures(selectedRows)

            #turn tables into shapefiles
            output = outputBase + database + "/" + table + ".shp"
            dataFile = outputBase + database + "/" + table + ".dbf"
            #change 6th parameter to True when query is done
            QgsVectorFileWriter.writeAsVectorFormat(vlayer, output, encoding, coordsys, "ESRI Shapefile", False)
            print "Translation of " + database + ": " + table + ".shp successful."

        elif table == "planet_osm_point":
            fields = vlayer.pendingFields()
            numFields = len(fields)
            numRows = vlayer.featureCount()

            #pointQuery = NEED QUERY
            print "Original", database, ": ", table, "has", str(numRows), "rows and", str(numFields), "columns."

            #request = QgsFeatureRequest()
            #request.setFilterExpression(pointQuery)
                        
            #selectedRows = []
            #selectedFeatures = vlayer.getFeatures(request)
            #for feature in selectedFeatures:
            #    selectedRows.append(feature.id())
            #vlayer.setSelectedFeatures(selectedRows)

            #turn tables into shapefiles
            output = outputBase + database + "/" + table + ".shp"
            dataFile = outputBase + database + "/" + table + ".dbf"
            #change 6th parameter to True when query is done
            QgsVectorFileWriter.writeAsVectorFormat(vlayer, output, encoding, coordsys, "ESRI Shapefile", False)
            print "Translation of " + database + ": " + table + ".shp successful."

        elif table == "planet_osm_polygon":
            fields = vlayer.pendingFields()
            numFields = len(fields)
            numRows = vlayer.featureCount()

            #poly_query = NEED QUERY
            print "Original", database, ": ", table, "has", str(numRows), "rows and", str(numFields), "columns."

            #request = QgsFeatureRequest()
            #request.setFilterExpression(poly_query)
            
            #selectedRows = []
            #selectedFeatures = vlayer.getFeatures(request)
            #for feature in selectedFeatures:
            #    selectedRows.append(feature.id())
            #vlayer.setSelectedFeatures(selectedRows)

            #turn tables into shapefiles
            output = outputBase + database + "/" + table + ".shp"
            dataFile = outputBase + database + "/" + table + ".dbf"
            #change 6th parameter to True when query is done
            QgsVectorFileWriter.writeAsVectorFormat(vlayer, output, encoding, coordsys, "ESRI Shapefile", False)
            print "Translation of " + database + ": " + table + ".shp successful."

        elif table == "planet_osm_roads":
            fields = vlayer.pendingFields()
            numFields = len(fields)
            numRows = vlayer.featureCount() 
            roadQuery = r""""highway" like '%motorway%' or  "highway" like '%trunk%'"""
            print "Original", database, ": ", table, "has", str(numRows), "rows and", str(numFields), "columns."

            request = QgsFeatureRequest()
            request.setFilterExpression(roadQuery)
            
            selectedRows = []
            selectedFeatures = vlayer.getFeatures(request)
            for feature in selectedFeatures:
                selectedRows.append(feature.id())
            vlayer.setSelectedFeatures(selectedRows)

            #turn tables into shapefiles
            output = outputBase + database + "/" + table + ".shp"
            dataFile = outputBase + database + "/" + table + ".dbf"
            QgsVectorFileWriter.writeAsVectorFormat(vlayer, output, encoding, coordsys, "ESRI Shapefile", True)
            print "Translation of " + database + ": " + table + ".shp successful."

        else:
            print "Bad table name."

        # line file can not contain more than 57513 rows
        # point file can not contain more than 43462 rows
        # polygon file cannot contain more than 54555 rows
        # roads file cannot contain more than 40,000 rows

        #print "Size:", str(float(os.path.getsize(dataFile))/1024), "KB."

print "Process complete."
